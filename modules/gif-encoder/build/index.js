'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _class, _temp;

var _canvas = require('canvas');

var _canvas2 = _interopRequireDefault(_canvas);

var _colorTable = require('./color-table');

var _colorTable2 = _interopRequireDefault(_colorTable);

var _lzw = require('./lzw');

var _lzw2 = _interopRequireDefault(_lzw);

var _stream = require('stream');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DISPOSAL_METHODS = {
  DO_NOT_DISPOSE: 1,
  RESTORE_TO_BACKGROUND: 2,
  RESTORE_TO_PREVIOUS: 3
};

const COLOR_WEIGHT_METHODS = {
  perceptive: (r1, g1, b1, r2, g2, b2) => Math.pow((r2 - r1) * 0.3, 2) + Math.pow((g2 - g1) * 0.59, 2) + Math.pow((b2 - b1) * 0.11, 2),
  actual: (r1, g1, b1, r2, g2, b2) => Math.pow(r2 - r1, 2) + Math.pow(g2 - g1, 2) + Math.pow(b2 - b1, 2)
};

function littleEndian(number, length) {
  const bytes = new Array(length);
  for (let i = 0; i < length; i++) {
    bytes[i] = number >> 8 * (length - 1 - i) & 0xff;
  }
  return bytes;
}

let GIFCanvas = (_temp = _class = class GIFCanvas extends _canvas2.default {

  constructor(width, height) {
    super(width, height);

    this.preserveTransparency = true;
    this.forceLocallColorTable = false;
    this.forceGlobalColorTable = false;
    this.colorTable = null;
    this.currentFrameIndex = -1;
    this.delay = 33;
    this.repeat = true;
    this.colorWeightMethod = COLOR_WEIGHT_METHODS.perceptive;
    this.disposalMethod = DISPOSAL_METHODS.DO_NOT_DISPOSE;
    this.headersWritten = false;
    this.readStream = new _stream.Readable();
    this.lastBGFrame = null;
    this.addFrame();
  }

  flush() {
    if (!this.headersWritten) {
      this.readStream.push(Buffer.from(this.getHeaderBytes()));
      this.headersWritten = true;
    }

    if (this.currentFrame && !this.currentFrame.flushed) {
      this.readStream.push(this.currentFrame.toBuffer(this.lastBGFrame));
      this.currentFrame.setFlushed(true);
    }

    return this;
  }

  getHeaderBytes() {
    const colorTableSize = this.colorTable ? { '256': 7, '128': 6, '64': 5, '32': 4, '16': 3, '8': 2, '4': 1 }[this.colorTable.length] : 0;
    const packedHeaderByte = (this.colorTable ? 1 << 7 : 0) | 7 << 4 | // color resolution
    colorTableSize;

    return [0x47, 0x49, 0x46, 0x38, 0x39, 0x61] // "GIF89a"
    .concat(littleEndian(this.width, 2), littleEndian(this.height, 2), packedHeaderByte, 0, 0);
  }

  setPreserveTransparency(allow) {
    this.preserveTransparency = allow;

    return this;
  }

  setForceLocalColorTable(force) {
    this.forceLocallColorTable = force;

    return this;
  }

  setForceGlobalColorTable(force) {
    this.forceGlobalColorTable = force;

    return this;
  }

  getColorTable() {
    return this.colorTable;
  }

  setColorTable(table) {
    this.colorTable = table;

    return this;
  }

  setDelay(delay) {
    this.delay = delay;

    return this;
  }

  setRepeat(repeat) {
    if (this.headersWritten) {
      throw new Error('setRepeat can not be called after headers have been written');
    }
    this.repeat = repeat;

    return this;
  }

  setColorWeightMethod(fn) {
    this.colorWeightMethod = fn;

    return this;
  }

  addFrame() {
    if (this.currentFrameIndex >= 0) this.flush();

    const { delay, disposalMethod, forceGlobalColorTable, transparentColorIndex } = this;
    const colorTable = forceGlobalColorTable ? this.colorTable : null;

    this.frames.push(new GIFFrame({ delay, disposalMethod, colorTable }));
    this.currentFrameIndex++;

    return this;
  }

  end() {
    this.flush();
    this.readStream.push();
    this.readStream.push(null);
  }
}, _class.DISPOSAL_METHODS = DISPOSAL_METHODS, _class.COLOR_WEIGHT_METHODS = COLOR_WEIGHT_METHODS, _temp);
exports.default = GIFCanvas;
let GIFFrame = class GIFFrame {
  constructor() {
    this.flushed = false;
  }

  toBuffer(previousFrame) {}

  setFlushed(flushed) {
    this.flushed = flushed;
    return this;
  }

  serialize() {
    const graphicsControlExtension = [0x21, 0xf9, byteSize, disposalMethod << 2 | transparentColorFlag, littleEndian(this.delayTime, 2), transparentColorIndex, 0];
    const imageDescriptor = [0x2c, littleEndian(this.left, 2), littleEndian(this.top, 2), littleEndian(this.width, 2), littleEndian(this.height, 2), localColorFlag << 7 | interlaceFlag << 6 | sortFlag << 5 | colorTableSize];
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,