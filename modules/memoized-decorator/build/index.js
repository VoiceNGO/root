'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (targetClass, methodName, descriptor) {
  const fn = descriptor.value;
  const className = targetClass.constructor.name;

  // todo: pull typeof checks out into const
  // dependent on https://github.com/facebook/flow/issues/5862
  if (typeof fn !== 'function') {
    throw new Error(`Decorator expected a function, but called on a ${typeof fn}`);
  }

  descriptor.value = function (...args) {
    const instanceExists = instanceMap.has(this);
    const instanceNumber = instanceMap.get(this) || counter++;
    const serializedArgs = (0, _serializeJavascript2.default)(args).slice(1, -1); // .slice removes opening & closing []'s
    const methodKey = `${className}[${instanceNumber}].${methodName}(${serializedArgs})`;
    const methodExists = methodMap.has(methodKey);
    const value = methodExists ? methodMap.get(methodKey) : fn.call(this, ...args);

    if (!instanceExists) {
      instanceMap.set(this, instanceNumber);
    }
    if (!methodExists) {
      methodMap.set(methodKey, value);
    }

    return value;
  };

  return descriptor;
};

require('source-map-support/register');

var _serializeJavascript = require('serialize-javascript');

var _serializeJavascript2 = _interopRequireDefault(_serializeJavascript);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const instanceMap = new WeakMap();
// @providesModule decorators/memoize

const methodMap = new Map();
let counter = 1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJ0YXJnZXRDbGFzcyIsIm1ldGhvZE5hbWUiLCJkZXNjcmlwdG9yIiwiZm4iLCJ2YWx1ZSIsImNsYXNzTmFtZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsIkVycm9yIiwiYXJncyIsImluc3RhbmNlRXhpc3RzIiwiaW5zdGFuY2VNYXAiLCJoYXMiLCJpbnN0YW5jZU51bWJlciIsImdldCIsImNvdW50ZXIiLCJzZXJpYWxpemVkQXJncyIsInNsaWNlIiwibWV0aG9kS2V5IiwibWV0aG9kRXhpc3RzIiwibWV0aG9kTWFwIiwiY2FsbCIsInNldCIsIldlYWtNYXAiLCJNYXAiXSwibWFwcGluZ3MiOiI7Ozs7OztrQkFXZSxVQUFTQSxXQUFULEVBQThCQyxVQUE5QixFQUFrREMsVUFBbEQsRUFBc0c7QUFDbkgsUUFBTUMsS0FBS0QsV0FBV0UsS0FBdEI7QUFDQSxRQUFNQyxZQUFZTCxZQUFZTSxXQUFaLENBQXdCQyxJQUExQzs7QUFFQTtBQUNBO0FBQ0EsTUFBSSxPQUFPSixFQUFQLEtBQWMsVUFBbEIsRUFBOEI7QUFDNUIsVUFBTSxJQUFJSyxLQUFKLENBQVcsa0RBQWlELE9BQU9MLEVBQUcsRUFBdEUsQ0FBTjtBQUNEOztBQUVERCxhQUFXRSxLQUFYLEdBQW1CLFVBQVMsR0FBR0ssSUFBWixFQUF1QjtBQUN4QyxVQUFNQyxpQkFBaUJDLFlBQVlDLEdBQVosQ0FBZ0IsSUFBaEIsQ0FBdkI7QUFDQSxVQUFNQyxpQkFBaUJGLFlBQVlHLEdBQVosQ0FBZ0IsSUFBaEIsS0FBeUJDLFNBQWhEO0FBQ0EsVUFBTUMsaUJBQWlCLG1DQUFVUCxJQUFWLEVBQWdCUSxLQUFoQixDQUFzQixDQUF0QixFQUF5QixDQUFDLENBQTFCLENBQXZCLENBSHdDLENBR2E7QUFDckQsVUFBTUMsWUFBYSxHQUFFYixTQUFVLElBQUdRLGNBQWUsS0FBSVosVUFBVyxJQUFHZSxjQUFlLEdBQWxGO0FBQ0EsVUFBTUcsZUFBZUMsVUFBVVIsR0FBVixDQUFjTSxTQUFkLENBQXJCO0FBQ0EsVUFBTWQsUUFBUWUsZUFBZUMsVUFBVU4sR0FBVixDQUFjSSxTQUFkLENBQWYsR0FBMENmLEdBQUdrQixJQUFILENBQVEsSUFBUixFQUFjLEdBQUdaLElBQWpCLENBQXhEOztBQUVBLFFBQUksQ0FBQ0MsY0FBTCxFQUFxQjtBQUNuQkMsa0JBQVlXLEdBQVosQ0FBZ0IsSUFBaEIsRUFBc0JULGNBQXRCO0FBQ0Q7QUFDRCxRQUFJLENBQUNNLFlBQUwsRUFBbUI7QUFDakJDLGdCQUFVRSxHQUFWLENBQWNKLFNBQWQsRUFBeUJkLEtBQXpCO0FBQ0Q7O0FBRUQsV0FBT0EsS0FBUDtBQUNELEdBaEJEOztBQWtCQSxTQUFPRixVQUFQO0FBQ0QsQzs7OztBQXJDRDs7Ozs7O0FBSUEsTUFBTVMsY0FBdUMsSUFBSVksT0FBSixFQUE3QztBQU5BOztBQU9BLE1BQU1ILFlBQTRCLElBQUlJLEdBQUosRUFBbEM7QUFDQSxJQUFJVCxVQUFVLENBQWQiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuLy8gQHByb3ZpZGVzTW9kdWxlIGRlY29yYXRvcnMvbWVtb2l6ZVxuXG5pbXBvcnQgc2VyaWFsaXplIGZyb20gJ3NlcmlhbGl6ZS1qYXZhc2NyaXB0JztcblxuaW1wb3J0IHR5cGUgeyBQcm9wZXJ0eURlc2NyaXB0b3IgfSBmcm9tICdmbG93LXR5cGVzJztcblxuY29uc3QgaW5zdGFuY2VNYXA6IFdlYWtNYXA8T2JqZWN0LCBudW1iZXI+ID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IG1ldGhvZE1hcDogTWFwPHN0cmluZywgKj4gPSBuZXcgTWFwKCk7XG5sZXQgY291bnRlciA9IDE7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldENsYXNzOiBPYmplY3QsIG1ldGhvZE5hbWU6IHN0cmluZywgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKTogUHJvcGVydHlEZXNjcmlwdG9yIHtcbiAgY29uc3QgZm4gPSBkZXNjcmlwdG9yLnZhbHVlO1xuICBjb25zdCBjbGFzc05hbWUgPSB0YXJnZXRDbGFzcy5jb25zdHJ1Y3Rvci5uYW1lO1xuXG4gIC8vIHRvZG86IHB1bGwgdHlwZW9mIGNoZWNrcyBvdXQgaW50byBjb25zdFxuICAvLyBkZXBlbmRlbnQgb24gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzU4NjJcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihgRGVjb3JhdG9yIGV4cGVjdGVkIGEgZnVuY3Rpb24sIGJ1dCBjYWxsZWQgb24gYSAke3R5cGVvZiBmbn1gKTtcbiAgfVxuXG4gIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiguLi5hcmdzKTogYW55IHtcbiAgICBjb25zdCBpbnN0YW5jZUV4aXN0cyA9IGluc3RhbmNlTWFwLmhhcyh0aGlzKTtcbiAgICBjb25zdCBpbnN0YW5jZU51bWJlciA9IGluc3RhbmNlTWFwLmdldCh0aGlzKSB8fCBjb3VudGVyKys7XG4gICAgY29uc3Qgc2VyaWFsaXplZEFyZ3MgPSBzZXJpYWxpemUoYXJncykuc2xpY2UoMSwgLTEpOyAvLyAuc2xpY2UgcmVtb3ZlcyBvcGVuaW5nICYgY2xvc2luZyBbXSdzXG4gICAgY29uc3QgbWV0aG9kS2V5ID0gYCR7Y2xhc3NOYW1lfVske2luc3RhbmNlTnVtYmVyfV0uJHttZXRob2ROYW1lfSgke3NlcmlhbGl6ZWRBcmdzfSlgO1xuICAgIGNvbnN0IG1ldGhvZEV4aXN0cyA9IG1ldGhvZE1hcC5oYXMobWV0aG9kS2V5KTtcbiAgICBjb25zdCB2YWx1ZSA9IG1ldGhvZEV4aXN0cyA/IG1ldGhvZE1hcC5nZXQobWV0aG9kS2V5KSA6IGZuLmNhbGwodGhpcywgLi4uYXJncyk7XG5cbiAgICBpZiAoIWluc3RhbmNlRXhpc3RzKSB7XG4gICAgICBpbnN0YW5jZU1hcC5zZXQodGhpcywgaW5zdGFuY2VOdW1iZXIpO1xuICAgIH1cbiAgICBpZiAoIW1ldGhvZEV4aXN0cykge1xuICAgICAgbWV0aG9kTWFwLnNldChtZXRob2RLZXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG59XG4iXX0=