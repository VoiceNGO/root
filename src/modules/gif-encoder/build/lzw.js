'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = compressLZW;

var _colorTable = require('./color-table');

var _colorTable2 = _interopRequireDefault(_colorTable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let LZWCompressor = class LZWCompressor {

  constructor(imageData, colorTable, colorWeightMethod, srcWidth, srcHeight, width, height, xOffset, yOffset) {
    this.codeTable = new Map();
    this.colorToIndexMap = new Map();
    this.pixelIndex = 0;
    this.output = [];

    if (xOffset + width > srcWidth || yOffset + height > srcHeight || xOffset < 0 || yOffset < 0 || width < 0 || height < 0) {
      throw new Error('Invalid dimensions passed to LZWCompressor');
    }

    Object.assign(this, {
      imageData,
      colorTable,
      colorWeightMethod,
      srcWidth,
      srcHeight,
      width,
      height,
      xOffset,
      yOffset
    });
    this.initializeCodeTable();
  }

  initializeCodeTable() {
    const { colorTable, codeTable } = this;
    const { colors } = colorTable;
    const l = colors.length;

    codeTable.clear();
    this.codeIndex = 0;

    for (let i = 0; i < l; i++) {
      const color = colors[i];
      this.addCodeToCodeTable(`${color[0]}-${color[1]}-${color[2]}`);
    }

    this.clearCode = l;
    this.EOICode = l + 1;
    this.codeIndex += 2;

    this.addOutputCode(this.clearCode);

    return this;
  }

  addCodeToCodeTable(code) {
    this.codeTable.set(code, this.codeIndex++);

    return this;
  }

  addOutputCode(code) {
    return this;
  }

  getNextColorIndex() {
    const {
      pixelIndex,
      imageData,
      colorTable,
      colorWeightMethod,
      colorToIndexMap,
      srcWidth,
      width,
      height,
      xOffset,
      yOffset
    } = this;
    this.pixelIndex++;

    const row = Math.floor(pixelIndex / width);
    const col = pixelIndex % width;
    const pixelOffset = ((row + yOffset) * srcWidth + xOffset + col) * 4;

    if (row >= height) {
      return -1;
    }

    // far faster than .slice
    const color = [
    // prettier-ignore
    imageData[pixelOffset], imageData[pixelOffset + 1], imageData[pixelOffset + 2]];

    // far faster than .join
    const colorKey = `${color[0]}-${color[1]}-${color[2]}}`;

    if (colorToIndexMap.has(colorKey)) {
      // $FlowFixMe
      return colorToIndexMap.get(colorKey);
    }

    // Scan the color table to pick out the closest color
    let bestColorIndex = -1;
    let bestColorDifference = Infinity;
    const { colors } = colorTable;
    for (let i = 0, l = colors.length; i < l; i++) {
      const colorTableColor = colors[i];
      const colorDifference = colorWeightMethod(color[0], color[1], color[2], colorTableColor[0], colorTableColor[1], colorTableColor[2]);
      if (colorDifference < bestColorDifference) {
        bestColorDifference = colorDifference;
        bestColorIndex = i;
      }
    }

    return bestColorIndex;
  }

  compress() {
    const { colorToIndexMap, codeTable } = this;

    let nextColorIndex;
    let indexBuffer = this.getNextColorIndex().toString();

    while ((nextColorIndex = this.getNextColorIndex()) >= 0) {
      indexBuffer += `-${nextColorIndex}`;
      if (colorToIndexMap.has(indexBuffer)) continue;

      this.addCodeToCodeTable(indexBuffer);
    }

    return this;
  }

  getBuffer() {
    return Buffer.from(this.output);
  }
};
function compressLZW(imageData, colorTable, colorWeightMethod, srcWidth, srcHeight, width, height, x, y) {
  const compressor = new LZWCompressor(imageData, colorTable, colorWeightMethod, srcWidth, srcHeight, width, height, x, y);

  return compressor.compress().getBuffer();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,